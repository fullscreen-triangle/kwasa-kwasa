// Example of chemical molecule analysis using Turbulance

// Import the chemistry module
import chemistry

// Create molecules from SMILES strings
var ethanol = chemistry.Molecule.from_smiles("CCO", "ethanol").with_name("Ethanol")
var aspirin = chemistry.Molecule.from_smiles("CC(=O)OC1=CC=CC=C1C(=O)O", "aspirin").with_name("Aspirin")
var caffeine = chemistry.Molecule.from_smiles("CN1C=NC2=C1C(=O)N(C(=O)N2C)C", "caffeine").with_name("Caffeine")

// Function to analyze a molecule
funxn analyze_molecule(molecule):
    print("Analyzing molecule: {}".format(molecule.display()))
    print("SMILES: {}".format(molecule.smiles()))
    print("Formula: {}".format(molecule.formula()))
    print("Molecular weight: {:.2f}".format(molecule.molecular_weight()))
    
    // Display atom count
    print("Number of atoms: {}".format(len(molecule.atoms())))
    
    // Display bond count
    print("Number of bonds: {}".format(len(molecule.bonds())))
    
    // Calculate functional groups (simplified)
    var functional_groups = identify_functional_groups(molecule)
    print("Functional groups:")
    for each group, count in functional_groups:
        print("  - {}: {}".format(group, count))
    
    print("-" * 50)

// Function to identify functional groups (simplified)
funxn identify_functional_groups(molecule):
    var groups = {}
    var smiles = molecule.smiles()
    
    // Check for common functional groups
    if smiles.contains("OH"):
        groups["hydroxyl"] = smiles.count("OH")
    
    if smiles.contains("C(=O)O"):
        groups["carboxyl"] = smiles.count("C(=O)O")
    
    if smiles.contains("C(=O)"):
        groups["carbonyl"] = smiles.count("C(=O)")
    
    if smiles.contains("N"):
        groups["amine/amide"] = smiles.count("N")
    
    if smiles.contains("C=C"):
        groups["alkene"] = smiles.count("C=C")
    
    if smiles.contains("c1"):
        groups["aromatic"] = 1
    
    return groups

// Analyze each molecule
analyze_molecule(ethanol)
analyze_molecule(aspirin)
analyze_molecule(caffeine)

// Mathematical operators example
// Create molecule operations
var molecule_ops = chemistry.MoleculeOperations.new()

// Division: split by functional groups
print("Dividing molecules by functional groups:")
var ethanol_parts = molecule_ops.divide(ethanol, "functional_group")
print("Ethanol divided into {} functional groups".format(len(ethanol_parts)))

var aspirin_parts = molecule_ops.divide(aspirin, "functional_group")
print("Aspirin divided into {} functional groups".format(len(aspirin_parts)))

// Division: split by rings
print("\nDividing molecules by rings:")
var caffeine_rings = molecule_ops.divide(caffeine, "ring")
print("Caffeine divided into {} rings".format(len(caffeine_rings)))

// Multiplication: chemical reaction (simplified)
var reaction_product = molecule_ops.multiply(ethanol, aspirin)
print("\nSimulated reaction between ethanol and aspirin:")
print("Result: {}".format(reaction_product.smiles()))

// Addition: combine molecules
var mixture = molecule_ops.add(caffeine, aspirin)
print("\nCombined caffeine and aspirin:")
print("Result: {}".format(mixture.smiles()))

// Subtraction: remove a functional group
var dehydroxylated = molecule_ops.subtract(ethanol, chemistry.Molecule.from_smiles("O", "hydroxyl"))
print("\nEthanol after removing hydroxyl group:")
print("Result: {}".format(dehydroxylated.smiles()))

// Using propositions and motions for chemical analysis
proposition ChemicalAnalysis:
    motion DrugLikeness("Molecules with specific properties can act as drugs")
    motion SolubilityPrediction("Polar functional groups increase water solubility")
    
    within caffeine:
        given contains_substructure("CN1C"):
            print("Contains N-methylated nitrogen - common in psychoactive compounds")
        given smiles().contains("C(=O)"):
            print("Contains carbonyl groups - potential for hydrogen bonding")

// Function to calculate complexity
funxn molecular_complexity(molecule):
    var smiles = molecule.smiles()
    var complexity = 0
    
    // Basic complexity based on molecule size
    complexity = complexity + len(smiles) * 0.5
    
    // Rings increase complexity
    complexity = complexity + smiles.count("1") * 5
    
    // Double/triple bonds increase complexity
    complexity = complexity + smiles.count("=") * 2
    complexity = complexity + smiles.count("#") * 3
    
    // Heteroatoms increase complexity
    complexity = complexity + smiles.count("N") * 2
    complexity = complexity + smiles.count("O") * 1.5
    complexity = complexity + smiles.count("S") * 2.5
    
    return complexity

// Compare molecular complexity
print("\nMolecular complexity comparison:")
print("Ethanol: {:.1f}".format(molecular_complexity(ethanol)))
print("Aspirin: {:.1f}".format(molecular_complexity(aspirin)))
print("Caffeine: {:.1f}".format(molecular_complexity(caffeine)))

// Find similar molecules
funxn find_similar(molecule, candidates, threshold=0.7):
    var similarities = []
    var target_complexity = molecular_complexity(molecule)
    
    for each candidate in candidates:
        var cand_complexity = molecular_complexity(candidate)
        var complexity_ratio = min(target_complexity, cand_complexity) / max(target_complexity, cand_complexity)
        
        var functional_similarity = 0.0
        var target_groups = identify_functional_groups(molecule)
        var cand_groups = identify_functional_groups(candidate)
        
        var common_groups = 0
        for each group in target_groups:
            if group in cand_groups:
                common_groups = common_groups + 1
        
        if len(target_groups) > 0 and len(cand_groups) > 0:
            functional_similarity = common_groups / ((len(target_groups) + len(cand_groups)) / 2)
        
        var overall_similarity = (complexity_ratio + functional_similarity) / 2
        
        if overall_similarity >= threshold:
            similarities.append((candidate, overall_similarity))
    
    return similarities

// Create additional molecules for similarity comparison
var acetaminophen = chemistry.Molecule.from_smiles("CC(=O)NC1=CC=C(C=C1)O", "acetaminophen").with_name("Acetaminophen")
var ibuprofen = chemistry.Molecule.from_smiles("CC(C)CC1=CC=C(C=C1)C(C)C(=O)O", "ibuprofen").with_name("Ibuprofen")

// Find molecules similar to aspirin
var candidates = [acetaminophen, ibuprofen, caffeine, ethanol]
var similar_to_aspirin = find_similar(aspirin, candidates)

print("\nMolecules similar to aspirin:")
for each (molecule, similarity) in similar_to_aspirin:
    print("{}: {:.2f} similarity".format(molecule.metadata().name.unwrap_or("Unknown"), similarity)) 