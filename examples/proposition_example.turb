// Kwasa-Kwasa Framework Proposition Example
// This demonstrates the new syntax and concepts

// Define a motion (idea component)
motion TextAnalysis {
    // Motion can contain methods and properties
    
    // Use allow instead of let for variables
    allow content = "This is an example text for analysis. It contains multiple sentences with varying structures. Some sentences are short. Others are more complex and have multiple clauses."
    
    // Define a cause (variable) that affects other elements
    cause readabilityThreshold = 0.7
    
    // Analyze text using text operations
    allow sentences = content.split(".")
    
    // Use considering all instead of for each
    considering all sentence in sentences: {
        allow cleanSentence = sentence.trim()
        
        // Skip empty sentences
        given cleanSentence.length > 0: {
            // Use the text unit analysis methods
            allow spellingResult = cleanSentence.spelling()
            allow capitalizationResult = cleanSentence.capitalization()
            
            // Check for cognitive biases
            allow biasResult = cleanSentence.check_sunken_cost_fallacy()
            
            // Custom checks
            allow complexityCheck = cleanSentence.check_this_exactly("complex")
            
            // Perform operations on results
            within spellingResult: {
                considering these word in misspelled: {
                    ensure word.length > 2
                }
            }
        }
    }
}

// Define a research proposition
motion ResearchProposition {
    // Define causes (variables)
    cause topic = "Cognitive biases in decision making"
    cause depth = 0.85
    
    // Research operation
    research topic
    
    // Create argument map data structure
    allow argumentMap = new ArgMap()
    
    // Add claims to map
    argumentMap.add_claim("main", "Cognitive biases significantly impact decision-making")
    
    // Add supporting evidence
    argumentMap.add_evidence("main", "study1", "Research by Kahneman shows systematic errors in judgment", 0.9)
    argumentMap.add_evidence("main", "study2", "Confirmation bias leads to selective information processing", 0.8)
    
    // Add objections
    argumentMap.add_objection("main", "obj1", "Individual differences may moderate bias effects")
    
    // Evaluate claim strength
    allow claimStrength = argumentMap.evaluate_claim("main")
    
    // Considering item for single-item processing
    considering item claimStrength: {
        given claimStrength > 0.7: {
            // Use proposition's strength to determine actions
            return "Strong claim requiring further investigation"
        }
    }
}

// Create a concept chain
allow causalChain = new ConceptChain()

// Add concepts and their relationships
causalChain.add_concept("c1", "Availability heuristic affects risk assessment")
causalChain.add_concept("c2", "People overestimate likelihood of vivid events")
causalChain.add_concept("c3", "Media coverage influences perceived risk")

// Define cause-effect relationships
causalChain.add_relationship("c1", "c2")
causalChain.add_relationship("c2", "c3")

// Find effects using the chain
allow effect = causalChain.effect_of("c1")

// Demonstrate text graph
allow conceptGraph = new TextGraph()

// Add nodes representing ideas
conceptGraph.add_node("n1", "Systematic biases affect all decision-making")
conceptGraph.add_node("n2", "Heuristics provide cognitive shortcuts")
conceptGraph.add_node("n3", "Fast thinking often leads to errors in judgment")

// Add weighted relationships between ideas
conceptGraph.add_edge("n1", "n2", 0.8)
conceptGraph.add_edge("n2", "n3", 0.9)

// Find related concepts
allow relatedIdeas = conceptGraph.find_related("n1", 0.7)

// Consider these ideas for processing
considering these idea in relatedIdeas: {
    // Process each related idea
    allow content = idea.content()
    ensure content.length > 0
}

// Define a proposition with motions
proposition TextAnalysis:
    // Define motions within the proposition
    motion Introduction("The text analysis begins with understanding the context.")
    motion MainPoint("Proper analysis requires both syntactic and semantic understanding.")
    motion Conclusion("By analyzing text with these methods, we gain deeper insights.")
    
    // Add metadata to the proposition
    with_metadata("domain", "linguistics")
    with_metadata("confidence", "0.95")
    
    // Process all motions in this proposition
    considering all motions in this:
        check_spelling(motion)
        check_capitalization(motion)
        
        // Conditionally check for biases
        given motion.content.length > 50:
            check_sunken_cost_fallacy(motion)
            
    // Allow specific operations on specific motions
    allow fact_checking on Introduction
    allow sentiment_analysis on MainPoint
    allow coherence_check on Conclusion

// Define causes with their effects
cause BiasedReasoning = {
    primary: "emotional investment",
    effects: [
        "selective evidence consideration",
        "overconfidence in judgment",
        "resistance to contrary evidence"
    ],
    confidence: 0.75
}

// Create specialized data structures
funxn demonstrate_data_structures():
    // Create a text graph for concept relationships
    item graph = new TextGraph()
    graph.add_node("syntax", Motion("Syntactic analysis examines structure", "concept"))
    graph.add_node("semantics", Motion("Semantic analysis examines meaning", "concept"))
    graph.add_node("pragmatics", Motion("Pragmatic analysis examines context", "concept"))
    
    // Add relationships between concepts
    graph.add_edge("syntax", "semantics", 0.7)
    graph.add_edge("semantics", "pragmatics", 0.8)
    
    // Create a concept chain for cause-effect relationships
    item chain = new ConceptChain()
    chain.add_concept("education", Motion("Increased language education", "factor"))
    chain.add_concept("awareness", Motion("Improved linguistic awareness", "result"))
    chain.add_concept("comprehension", Motion("Better text comprehension", "result"))
    
    // Define causal relationships
    chain.add_relationship("education", "awareness")
    chain.add_relationship("awareness", "comprehension")
    
    // Create a hierarchy of ideas
    item hierarchy = new IdeaHierarchy()
    hierarchy.add_root("linguistics", Motion("Linguistics", "field"))
    hierarchy.add_child("linguistics", "phonetics", Motion("Phonetics", "subfield"))
    hierarchy.add_child("linguistics", "morphology", Motion("Morphology", "subfield"))
    hierarchy.add_child("linguistics", "syntax", Motion("Syntax", "subfield"))
    
    // Create an argument map
    item argmap = new ArgMap()
    argmap.add_claim("main", Motion("Text analysis should be taught in schools", "claim"))
    argmap.add_evidence(
        "main", 
        "evidence1", 
        Motion("Improves critical thinking skills", "evidence"),
        0.8
    )
    argmap.add_objection(
        "main",
        "objection1",
        Motion("Curriculum is already overloaded", "objection")
    )
    
    return {
        "graph": graph,
        "chain": chain,
        "hierarchy": hierarchy,
        "argmap": argmap
    }

// Demonstrate considering statements
funxn analyze_text(text):
    item paragraphs = text / "paragraph"
    
    // Consider all paragraphs
    considering all paragraphs:
        analyze_sentiment(paragraph)
        
    // Consider specific paragraphs
    considering these paragraphs where contains("important"):
        highlight(paragraph)
        
    // Consider a single item
    considering item paragraphs[0]:
        ensure_contains_hook()
        
    return "Analysis complete"

// Main function
funxn main():
    // Create and analyze a proposition
    item analysis = new TextAnalysis()
    
    // Use the cause in analysis
    given text.contains_any(BiasedReasoning.effects):
        warn("Potential bias detected")
        
    // Set up the data structures
    item structures = demonstrate_data_structures()
    
    // Evaluate the strength of the argument
    item strength = structures.argmap.evaluate_claim("main")
    print("Argument strength: " + strength)
    
    // Return the results
    return {
        "proposition": analysis,
        "data_structures": structures,
        "bias_check": BiasedReasoning
    } 