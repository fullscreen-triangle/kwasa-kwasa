version: '3.8'

services:
  # Main Kwasa-Kwasa application
  kwasa-kwasa:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kwasa-kwasa-app
    ports:
      - "8080:8080"
    volumes:
      - ./examples:/app/examples:ro
      - ./docs:/app/docs:ro
      - kwasa-data:/app/data
    environment:
      - RUST_LOG=info
      - KWASA_ENV=production
    restart: unless-stopped
    networks:
      - kwasa-network
    depends_on:
      - redis
      - postgres

  # Development environment
  kwasa-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    container_name: kwasa-kwasa-dev
    ports:
      - "8080:8080"
      - "9229:9229"  # Debug port
    volumes:
      - .:/app
      - target-cache:/app/target
      - cargo-cache:/usr/local/cargo/registry
    environment:
      - RUST_LOG=debug
      - KWASA_ENV=development
      - CARGO_TARGET_DIR=/app/target
    command: cargo watch -x "run --features=full"
    networks:
      - kwasa-network
    depends_on:
      - redis
      - postgres

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: kwasa-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - kwasa-network
    restart: unless-stopped

  # PostgreSQL for persistent data storage
  postgres:
    image: postgres:15-alpine
    container_name: kwasa-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=kwasa_kwasa
      - POSTGRES_USER=kwasa
      - POSTGRES_PASSWORD=kwasa_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - kwasa-network
    restart: unless-stopped

  # Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: kwasa-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - kwasa-network
    depends_on:
      - kwasa-kwasa
    restart: unless-stopped
    profiles:
      - production

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: kwasa-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - kwasa-network
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: kwasa-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - kwasa-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Elasticsearch for log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: kwasa-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - kwasa-network
    profiles:
      - logging

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kwasa-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - kwasa-network
    depends_on:
      - elasticsearch
    profiles:
      - logging

networks:
  kwasa-network:
    driver: bridge

volumes:
  kwasa-data:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:
  elasticsearch-data:
  target-cache:
  cargo-cache: 